#!/usr/bin/env bash
set -e
trap "exit 1" TERM
export TOP_PGID=$(ps --no-headers -o pgid $$ | tr -d ' ')
function helpme() {
	if [[ "$1" = "" ]]
	then
		cat /proc/$$/fd/255 | sed -n '/^#HELPME_START/,/^#HELPME_END/p' | grep -v "^#HELPME_" | grep -e "	-\|^#" | grep -- "$(echo $OPT_SHORT | sed -e "s/://g" | sed -e "s/\(.\)/\t-\1 \\\|/g" | sed -e "s/$/^#$COMMAND\t\\\|^#[A-Z]/" )" | sed -e "s/^#$COMMAND\t/\t/; s/^#//" 1>&2
	else
		echo -e "$1" 1>&2
	fi
	kill -s TERM -- -$TOP_PGID
}
function get_free_ports {
	[ "$1" != "tcp" -a "$1" != "udp" ] && helpme "ERR-015: contact developer"
	export LC_ALL=C
	join -v 1 <(seq $2 $3) <(netstat -ln4${1:0:1} | grep ^$1 | awk '{print $4}' | cut -d : -f 2 |sort) | head -n $4
}
function get_hostfwd {
	PROTO=$1
	shift
	[ -z "$1" ] && return
	COUNT=$(echo "$@" | sed -e "s/ /\n/g" | wc -l)
	paste <(get_free_ports $PROTO 40000 50000 $COUNT) <(echo "$@" | sed -e "s/ /\n/g") | awk -v PROTO=$PROTO '{if (NR>1) printf ","; printf "hostfwd=%s::%s-:%s", PROTO, $1, $2}'
}
function help_and_copyright {
	helpme "Usage: daiker <command> [-h] [<args>]
commands:
	build
	run	
	convert

VERSION
	20210607
COPYRIGHT
	Developed by Manhong Dai, https://github.com/daimh/daiker
	Copyright Â© 2021 University of Michigan. License GPLv3+: GNU GPL version 3 or later
	This is free software: you are free to change and redistribute it.
	There is NO WARRANTY, to the extent permitted by law."
}
function is_not_base_image {
	qemu-img info $1 | grep -q "backing file:"
}
[ "$1" = "-h" -o "$1" = "--help" -o "$1" = "help" ] && help_and_copyright
COMMAND=$1
OPT_SHORT="hvc:r:i:PM:T:U:VQ:"
OPT_LONG="help,verbose,cpu:,ram:,iso:,private-net,mount:,tcp-ports:,udp-ports:use-vnc,qemu-parameters"
shift || help_and_copyright
if [ "$COMMAND" = "build" ]
then
	OPT_SHORT="${OPT_SHORT}H:"
	OPTS=$(getopt -o $OPT_SHORT --long "$OPT_LONG,hda-size:" -n daiker -- "$@")
elif [ "$COMMAND" = "run" ]
then
	OPT_SHORT="${OPT_SHORT}b:"
	OPTS=$(getopt -o $OPT_SHORT --long "$OPT_LONG,base:" -n daiker -- "$@")
elif [ "$COMMAND" = "convert" ]
then
	OPT_SHORT="hv"
	OPT_LONG="help,verbose"
	OPTS=$(getopt -o $OPT_SHORT --long $OPT_LONG -n daiker -- "$@")
else
	helpme "ERR-001: unsupported daiker command"
fi
CPU=2
RAM=4
HDA=50
VNC=no
PRIVATENET=no
MOUNTDIRS=()
TCPPORTS=()
UDPPORTS=()
PUBNET="user,id=n0"
eval set -- "$OPTS"
while :
do
	case "$1" in
#HELPME_START
#NAME
#build	daiker build - build a base image
#run	daiker run - run an overlay image
#convert	daiker convert - convert an overlay image to a base image
#SYNOPSIS
#build	daiker build [OPTION]... [FILE]
#run	daiker run [OPTION]... [FILE]
#convert	daiker convert FILE
#EXAMPLE
#build	daiker build -H 50 -i ubuntu-18.04.5-live-server-amd64.iso BionicBeaverBase.img
#run	daiker run -b BionicBeaverBase.img BionicBeaverTest.img
#run	daiker run -T 22 -T 80 BionicBeaverTest.img
#convert	daiker convert BionicBeaverTest.img
#OPTIONS
		-h | --help)
			helpme ;;
		-v | --verbose)
			set -x
			shift ;;
		-c | --cpu)	#=CPU, number of cpus, default 2
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-021: invalid number: -c $2"
			CPU=$2
			shift 2 ;;
		-r | --ram)	#=RAM, memory size, in GB, default 4
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-022: invalid number: -r $2"
			RAM=$2
			shift 2 ;;
		-i | --iso)	#=ISO file, used as cdrom
			ISO=$2
			shift 2 ;;
		-P | --private-net)	#add the second NIC to share the same private network traffic with other virtual machines
			PRIVATENET=yes
			shift 1 ;;
		-M | --mount)	#=DIR, allows virtual machine to mount multiple directories on the physical host with some command like 'mount -t 9p daiker-0 /mnt', where 'daiker-0' means the first -m option. Default CentOS or Windows doesn't support this feature
			MOUNTDIRS+=($2)
			shift 2 ;;
		-T | --tcp-ports)	#=PORT or PORT-HOSTPORT, a tcp port on the virtual machine forwarded from the physical host
			if [[ "$2" == *"-"* ]]
			then
				IFS=- read VPORT HPORT <<< "$2"
				[ "$HPORT" -eq "$HPORT" ] && [ "$VPORT" -eq "$VPORT" ] 2> /dev/null || helpme "ERR-023: invalid number: -T $2"
				PUBNET="$PUBNET,hostfwd=tcp::$HPORT-:$VPORT"
			else
				[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-023: invalid number: -T $2"
				TCPPORTS+=($2)
			fi
			shift 2 ;;
		-U | --udp-ports)	#=PORT or PORT-HOSTPORT, a udp port on the virtual machine forwarded from the physical host
			if [[ "$2" == *"-"* ]]
			then
				IFS=- read VPORT HPORT <<< "$2"
				[ "$HPORT" -eq "$HPORT" ] && [ "$VPORT" -eq "$VPORT" ] 2> /dev/null || helpme "ERR-024: invalid number: -U $2"
				PUBNET="$PUBNET,hostfwd=udp::$HPORT-:$VPORT"
			else
				[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-024: invalid number: -U $2"
				UDPPORTS+=($2)
			fi
			shift 2 ;;
		-V | --use-VNC)	#use VNC instead of X window
			VNC=yes
			shift ;;
		-Q | --qemu-parameters)	#Other qemu parameters
			QEMU_PARAMETERS=$2
			shift 2 ;;
		-b | --base)	#=BASE, The base image file that a new virtual machine is created from
			BASE=$2
			shift 2 ;;
		-H | --hda-size)	#=SIZE, hard drive size, in GB, default 50
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-025: invalid number: -H $2"
			HDA=$2
			shift 2 ;;
#HELPME_END
		--)
			shift
			break ;;
		*)
			break ;;
	esac
done
[ $# -eq 1 ] || helpme "ERR-002: run 'daiker -h/--help' or 'daiker $COMMAND -h/--help'"
FILE=$1
[ ! -z "$FILE" ] || helpme "ERR-003: missing FILE"
MOUNTS=""
for ((IDX=0; IDX<${#MOUNTDIRS[@]}; IDX++))
do
	[ -d ${MOUNTDIRS[$IDX]} ] || helpme "ERR-020: no such dir ${MOUNTDIRS[$IDX]}"
	MOUNTS="$MOUNTS -virtfs local,id=daiker-$IDX,path=${MOUNTDIRS[$IDX]},security_model=none,multidevs=remap,mount_tag=daiker-$IDX"
done
if [ "$PRIVATENET" = "yes" ]
then
	MAC=$(printf "52:54:00:%02x:%02x:%02x\n" $(( $RANDOM % 256)) $(( $RANDOM % 256)) $(( $RANDOM % 256)) )
	PRVNET="-device e1000,netdev=n1,mac=$MAC -netdev socket,id=n1,mcast=230.$(($(id -u) % 239)).$(($(id -u) % 241)).$(($(id -u) % 251)):$(($(id -u) % 9973 + 30000))"
fi
if [[ ${#TCPPORTS[@]} -gt 0 ]]
then
	HOSTFWD=$( get_hostfwd tcp ${TCPPORTS[@]} )
	[ -n "$HOSTFWD" ] || helpme "ERR-016: faield to get a idle tcp port on physical machine"
	echo "TCP ports: $HOSTFWD"
	PUBNET="$PUBNET,$HOSTFWD"
fi
if [[ ${#UDPPORTS[@]} -gt 0 ]]
then
	HOSTFWD=$( get_hostfwd udp ${UDPPORTS[@]} )
	[ -n "$HOSTFWD" ] || helpme "ERR-017: faield to get a idle udp port on physical machine"
	echo "UDP ports: $HOSTFWD"
	PUBNET="$PUBNET,$HOSTFWD"
fi
if [ "$VNC" = "no" ]
then
	QEMU_DISPLAY="gtk -vga std"
	[ "$COMMAND" = "convert" -o "$DISPLAY" != "" ] || helpme "ERR-004: DISPLAY is not set, are you running X?"
else
	VNC=$(get_free_ports tcp 5900 6000 1)
	[ -z "$VNC" ] && help "ERR-014: no available vnc port"
	echo "VNC ports: $VNC" 
	((VNC=VNC-5900)) || :
	QEMU_DISPLAY="vnc=:$VNC"
fi
if [ "$COMMAND" = "convert" ]
then
	is_not_base_image $FILE || helpme "ERR-026: $FILE is already a base image"
	read -p "convert \"$FILE\" to base image? type \"$FILE\" to confirm: " ANS
	[ "$ANS" == "$FILE" ] || helpme "Quitting"
	qemu-img rebase -F qcow2 -f qcow2 -b "" $FILE
	exit
elif [ "$COMMAND" = "build" ]
then
	[ ! -f $FILE ] || helpme "ERR-005: $FILE exists"
	[ -f "$ISO" ] || helpme "ERR-006: no such file $ISO"
	[ ! -z "$HDA" ] || helpme "ERR-007: missing -H $HDA"
	qemu-img create -qf qcow2 $FILE ${HDA}G
	CDROM="-cdrom $ISO"
elif [ "$COMMAND" = "run" ]
then
	if [ -n "$ISO" ]
	then
		[ -f "$ISO" ] || helpme "ERR-008: no such file $ISO"
		CDROM="-cdrom $ISO"
	fi
	if [ -n "$BASE" ]
	then
		[ -f $BASE ] || helpme "ERR-009: no such file $BASE"
		! is_not_base_image $BASE || helpme "ERR-019: $BASE is not a base image, please run 'daiker convert $BASE' to convert it first"
		[ ! -f $FILE ] || helpme "ERR-010: $FILE exists, don't use '-b $BASE' in the command, or delete '$FILE' to create a new image."
		qemu-img create -qf qcow2 -b $BASE -F qcow2 $FILE
	else
		[ -f $FILE ] || helpme "ERR-011: no such file $FILE"
		! fuser $FILE || helpme "ERR-012: $FILE is in use by the process above"
		is_not_base_image $FILE || helpme "ERR-013: $FILE is a base image, please run 'daiker run -b $FILE NEWFILE.img' to create a new overlay image"
	fi
else
	help_and_copyright
fi
qemu-system-x86_64 -cpu host -enable-kvm -smp $CPU -m ${RAM}G -hda $FILE $CDROM -device e1000,netdev=n0 -netdev $PUBNET $PRVNET $MOUNTS -display $QEMU_DISPLAY $QEMU_PARAMETERS
