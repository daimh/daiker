#!/usr/bin/env bash
set -Eeufo pipefail
trap "exit 1" TERM
function helpme {
	if [ $# -gt 0 ]
	then
		echo -e "$1" 1>&2
	else
		grep '#' /proc/$$/fd/255 | sed -n '/^#HELPME_START/,/^#HELPME_END/p' | grep -v "^#HELPME_" | grep -- "$(echo $OptShort | tr -d : | sed -e "s/\(.\)/\t-\1 \\\|/g" | sed -e "s/$/^#$Command\t\\\|^#[A-Z\t]/")" | sed -e "s/^#$Command//" | tr -d '#' | tr -s '\t'
	fi
	kill -s TERM -- -$(cut -d ' ' -f 5 /proc/$$/stat)
}
function get_free_ports {
	[ "$1" != "tcp" -a "$1" != "udp" ] && helpme "ERR-015: contact developer"
	export LC_ALL=C
	sleep 0.$(($RANDOM%10))
	join -v 1 <(seq $2 $3) <(ss -4ln${1:0:1} | tail -n +2 | awk '{print $4}' | cut -d : -f 2 |sort) | shuf | head -n $4
}
function get_hostfwd {
	Proto=$1
	shift
	[ -z "$1" ] && return
	COUNT=$(echo "$@" | sed -e "s/ /\n/g" | wc -l)
	paste <(get_free_ports $Proto 40000 50000 $COUNT) <(echo "$@" | sed -e "s/ /\n/g") | awk -v Proto=$Proto '{if (NR>1) printf ","; printf "hostfwd=%s::%s-:%s", Proto, $1, $2}'
}
function usage {
	helpme "Usage: daiker <command> [-h] [<args>]
commands:
	build
	run	
	convert"
}
function is_not_base_image {
	qemu-img info $1 | grep -q "backing file:"
}
function version {
	helpme 20221024
}
[ $# -gt 0 ] || usage
[ "$1" != "-h" -a "$1" != "--help" -a "$1" != "help" ] || usage
Command=$1
OptShort="hvc:r:i:de:M:T:U:D:Q:"
OptLong="help,version,cpu:,ram:,iso:,disable-public-net,enable-private-net:,mount:,tcp-ports:,udp-ports:display:,qemu-parameters"
shift || usage
if [ "$Command" = "build" ]
then
	OptShort="${OptShort}H:"
	OPTS=$(getopt -o $OptShort --long "$OptLong,hda-size:" -n daiker -- "$@")
elif [ "$Command" = "run" ]
then
	OptShort="${OptShort}b:F"
	OPTS=$(getopt -o $OptShort --long "$OptLong,base:,force" -n daiker -- "$@")
elif [ "$Command" = "convert" ]
then
	OptShort="hv"
	OptLong="help,version"
	OPTS=$(getopt -o $OptShort --long $OptLong -n daiker -- "$@")
elif [ "$Command" = "--version" ]
then
	version
else
	helpme "ERR-001: unsupported daiker command"
fi
Cpu=2
Base=""
Iso=""
RamSize=4
HdSize=50
Vnc=no
EnablePrivateNets=()
DisablePublicNet=""
Force=""
MountDirs=()
TcpPorts=()
UdpPorts=()
PrvNet=""
PubNet="-nic user,model=virtio-net-pci"
QemuDisplay=gtk
QemuParameters=()
eval set -- "$OPTS"
while :
do
	case "$1" in
#HELPME_START
#NAME
#build	daiker build - build a base image
#run	daiker run - run an overlay image
#convert	daiker convert - convert an overlay image to a base image
#SYNOPSIS
#build	daiker build [OPTION]... [FILE]
#run	daiker run [OPTION]... [FILE]
#convert	daiker convert [FILE]
#EXAMPLE
#build	daiker build -H 50 -i ubuntu-18.04.5-live-server-amd64.iso BionicBeaverBase.qcow2
#run	daiker run -b BionicBeaverBase.qcow2 BionicBeaverTest.qcow2
#run	daiker run -T 22 -T 80 BionicBeaverTest.qcow2
#run	
#run	wget https://dl-cdn.alpinelinux.org/alpine/v3.16/releases/x86_64/alpine-netboot-3.16.2-x86_64.tar.gz
#run	tar xvfz alpine-netboot-3.16.2-x86_64.tar.gz
#run	daiker run -Q '-kernel boot/vmlinuz-virt -initrd boot/initramfs-virt -append alpine_repo=https://dl-cdn.alpinelinux.org/alpine/v3.16/main' /dev/null 
#convert	daiker convert BionicBeaverTest.qcow2
#OPTIONS
		-h | --help)	#print help information
			helpme ;;
		--version)	#print version
			version ;;
		-v )	#verbose output
			set -x
			shift ;;
		-c | --cpu)	#=Cpu, number of cpus, default 2
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-021: invalid number: -c $2"
			Cpu=$2
			shift 2 ;;
		-r | --ramsize)	#=RamSize, memory size, in GB, default 4
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-022: invalid number: -r $2"
			RamSize=$2
			shift 2 ;;
		-i | --iso)	#=Iso file, used as cdrom
			Iso=$2
			shift 2 ;;
		-d | --disable-public-net)	#disable public net. The machine won't be able to access the Internet
			DisablePublicNet=YES
			shift 1 ;;
		-e | --enable-private-net)	#=random/11:22:33, add a NIC with a specfic or random mac address to share the same private network traffic with other virtual machines that also used '-e'. The mac address will be prepended with '52:54:00'
			EnablePrivateNets+=($2)
			shift 2 ;;
		-M | --mount)	#=DIR, allows virtual machine to mount multiple directories on the physical host with some command like 'mount -t 9p -o msize=1048576 daiker-0 /mnt', where 'daiker-0' means the first -m option. Default CentOS or Windows doesn't support this feature
			MountDirs+=($2)
			shift 2 ;;
		-T | --tcp-ports)	#=VMPORT or VMPORT-HOSTPORT, tcp port HOSTPORT on the host is forwarded to VMPORT on the virtual machine
			if [[ "$2" == *"-"* ]]
			then
				IFS=- read VPORT HPORT <<< "$2"
				[ "$HPORT" -eq "$HPORT" ] && [ "$VPORT" -eq "$VPORT" ] 2> /dev/null || helpme "ERR-023: invalid number: -T $2"
				PubNet="$PubNet,hostfwd=tcp::$HPORT-:$VPORT"
			else
				[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-024: invalid number: -T $2"
				TcpPorts+=($2)
			fi
			shift 2 ;;
		-U | --udp-ports)	#=VMPORT or VMPORT-HOSTPORT, udp port HOSTPORT on the host is forwarded to VMPORT on the virtual machine
			if [[ "$2" == *"-"* ]]
			then
				IFS=- read VPORT HPORT <<< "$2"
				[ "$HPORT" -eq "$HPORT" ] && [ "$VPORT" -eq "$VPORT" ] 2> /dev/null || helpme "ERR-026: invalid number: -U $2"
				PubNet="$PubNet,hostfwd=udp::$HPORT-:$VPORT"
			else
				[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-027: invalid number: -U $2"
				UdpPorts+=($2)
			fi
			shift 2 ;;
		-D | --display)	#gtk/vnc/none/nographic, default gtk, which requires X
			QemuDisplay=$2
			shift 2 ;;
		-Q | --qemu-parameters)	#Other qemu parameters, can be used multiple times. For example, to use a usb device, run "sudo chown $USER /dev/bus/usb/003/006; daiker run -Q "-device usb-ehci,id=ehci -device usb-host,hostbus=3,hostaddr=6" test.qcow2
			QemuParameters+=("$2")
			shift 2 ;;
		-b | --base)	#=Base, the base image that a new virtual machine will be created from. Base should be the output file of 'daiker build'. Its actual format is a qemu image without backing file
			Base=$2
			shift 2 ;;
		-F | --force)	#force to run on either a base image to modify it, or an overlay image as base. It could corrupt other overlay images depending on the image being modified. Use at your risk!
			Force=YES
			shift ;;
		-H | --hda-size)	#=SIZE, hard drive size, in GB, default 50
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-025: invalid number: -H $2"
			HdSize=$2
			shift 2 ;;
		--)
			shift
			break ;;
		*)
			break ;;
#AUTHOR
#	Manhong Dai
#COPYRIGHT
#	Copyright Â© 2002-2022 University of Michigan, 2022 KLA.
#	License GPLv3+: GNU GPL version 3 or later
#	<https://gnu.org/licenses/gpl.html>.
#	This is free software: you are free to change and redistribute it.
#	There is NO WARRANTY, to the extent permitted by law.
#HELPME_END
	esac
done
[ $# -eq 1 ] || helpme "ERR-002: run 'daiker -h/--help' or 'daiker $Command -h/--help'"
Image=$1
[ ! -z "$Image" ] || helpme "ERR-003: missing Image"
if [ "$Image" = "/dev/null" ]
then
	Hda=""
else
	Hda="-hda $Image"
fi
Mounts=""
for ((Idx=0; Idx<${#MountDirs[@]}; Idx++))
do
	[ -d ${MountDirs[$Idx]} ] || helpme "ERR-020: no such dir ${MountDirs[$Idx]}"
	Mounts="$Mounts -virtfs local,id=daiker-$Idx,path=${MountDirs[$Idx]},security_model=none,multidevs=remap,mount_tag=daiker-$Idx"
done
for ((i=0; i<${#EnablePrivateNets[@]}; i++))
do
	if [ "${EnablePrivateNets[$i]}" = "random" ]
	then
		MacAddr=$(printf "52:54:00:%02x:%02x:%02x\n" $(( $RANDOM % 256)) $(( $RANDOM % 256)) $(( $RANDOM % 256)) )
	else
		MacAddr=$(printf "52:54:00:${EnablePrivateNets[$i]}\n")
	fi
	PrvNet+=" -device virtio-net-pci,netdev=n$i,mac=$MacAddr -netdev socket,id=n$i,mcast=230.$(($(id -u) % 239)).$(($(id -u) % 241)).$(($(id -u) % 251)):$(($(id -u) % 9973 + 30000+$i))"
done
if [[ ${#TcpPorts[@]} -gt 0 ]]
then
	[ "$DisablePublicNet" != "YES" ] || helpme "ERR-006: -T cannot be used with -d"
	HostFwd=$( get_hostfwd tcp ${TcpPorts[@]} )
	[ -n "$HostFwd" ] || helpme "ERR-016: faield to get a idle tcp port on physical machine"
	echo "TCP ports: $HostFwd"
	PubNet="$PubNet,$HostFwd"
fi
if [[ ${#UdpPorts[@]} -gt 0 ]]
then
	[ "$DisablePublicNet" != "YES" ] || helpme "ERR-030: -U cannot be used with -d"
	HostFwd=$( get_hostfwd udp ${UdpPorts[@]} )
	[ -n "$HostFwd" ] || helpme "ERR-017: faield to get a idle udp port on physical machine"
	echo "UDP ports: $HostFwd"
	PubNet="$PubNet,$HostFwd"
fi
if [ "$QemuDisplay" = "gtk" ]
then
	set +u
	[ "$Command" = "convert" -o -n "$DISPLAY" ] || helpme "ERR-004: '-D gtk' needs X, or you might want to try '-D vnc'"
	set -u
	QemuDisplay="-display gtk -vga std"
elif [ "$QemuDisplay" = "vnc" ]
then
	Vnc=$(get_free_ports tcp 5900 5999 1)
	[ -z "$Vnc" ] && help "ERR-014: no available vnc port"
	echo "$Image VNC port: $Vnc"
	((Vnc=Vnc-5900)) || :
	QemuDisplay="-display vnc=:$Vnc"
elif [ "$QemuDisplay" = "none" ]
then
	QemuDisplay="-display none"
elif [ "$QemuDisplay" = "nographic" ]
then
	QemuDisplay="-nographic"
else
	help "ERR-018: invalid argument $QemuDisplay for '-display'. Try '-h'"
fi
if [ "$DisablePublicNet" = "YES" ]
then
	PubNet=""
fi
if [ -n "$Iso" ]
then
	[ -f "$Iso" ] || helpme "ERR-008: no such iso file $Iso"
	Iso="-cdrom $Iso"
fi
if [ "$Command" = "convert" ]
then
	is_not_base_image $Image || helpme "ERR-028: $Image is already a base image"
	read -p "convert \"$Image\" to base image? type \"$Image\" to confirm: " Ans
	[ "$Ans" == "$Image" ] || helpme "Quitting"
	qemu-img rebase -F qcow2 -f qcow2 -b "" $Image
	exit
elif [ "$Command" = "build" ]
then
	if [ "$Image" != "/dev/null" ]
	then
		[ ! -f $Image ] || helpme "ERR-005: $Image exists"
		[ ! -z "$HdSize" ] || helpme "ERR-007: missing -H"
		qemu-img create -qf qcow2 $Image ${HdSize}G
	fi
elif [ "$Command" = "run" ]
then
	if [ -n "$Base" ]
	then
		[ -f $Base ] || helpme "ERR-009: no such file $Base"
		[ "$Force" = "YES" ] || ! is_not_base_image $Base || helpme "ERR-019: $Base is not a base image, please run 'daiker convert $Base' to convert it first"
		DirName=$(dirname $Image)
		if [ -f $Image ]
		then
			Backing=$(qemu-img info $Image | grep '^backing file: ' | sed -e "s/^backing file: //; s/ (actual path: .*//")
			[ "$(realpath $DirName/$Backing)" = "$(realpath $Base)" ] || helpme "ERR-010: overlay image '$Image' already exists, but its base image is '$Backing', instead of '-b $Base'. Either delete the file '$Image' or don't use '-b $Base' in the command."
		else
			[ -d $DirName ] || helpme "ERR-029: no such directory $DirName"
			qemu-img create -qf qcow2 -b $(realpath --relative-to=$DirName $Base) -F qcow2 $Image
		fi
	elif [ "$Image" != "/dev/null" ]
	then
		[ -f $Image ] || helpme "ERR-011: no such file $Image"
		! fuser $Image || helpme "ERR-012: $Image is in use by the process above"
		[ "$Force" = "YES" ] || is_not_base_image $Image || helpme "ERR-013: $Image is a base image, please run 'daiker run -b $Image new-image.qcow2' to create a new overlay image, or use -F at your own risk!"
	fi
else
	usage
fi
QemuBin=$(command -v qemu-system-x86_64 2>/dev/null) ||
	QemuBin="$(command -v qemu-kvm 2>/dev/null)" ||
	QemuBin="$(command -v /usr/libexec/qemu-kvm 2>/dev/null)" ||
	helpme "ERR-031: qemu-system-x86_64 or qemu-kvm is missing"
$QemuBin -name $Image -cpu host -enable-kvm -usb -device usb-tablet -smp $Cpu -m ${RamSize}G $Hda $Iso $PubNet $PrvNet $Mounts $QemuDisplay ${QemuParameters[@]}
